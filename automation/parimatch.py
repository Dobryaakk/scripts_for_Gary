import time
import keyboard
import threading
import pyautogui
import logging
from datetime import datetime

from helium import *
from config import sites
from utils.helpers import generate_password, get_gender_title_pari
from utils.file_operations import save_results_to_excel
from utils.browser_utils import kill_chrome
from utils.helpers import check_for_errors

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('automation.log')
    ]
)
logger = logging.getLogger(__name__)

stop_flag = False


def listen_for_exit_key():
    global stop_flag
    keyboard.add_hotkey('ctrl+q', lambda: set_stop_flag())
    while not stop_flag:
        time.sleep(0.1)


def set_stop_flag():
    global stop_flag
    stop_flag = True
    logger.info("‚õî –ó—É–ø–∏–Ω–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+Q)")


def run_automation_parimatch(data_list, file_path, lbl_status):
    results = []
    listener_thread = threading.Thread(target=listen_for_exit_key, daemon=True)
    listener_thread.start()

    for idx, row in enumerate(data_list, 1):
        if stop_flag:
            logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
            save_results_to_excel(results, file_path)
            return

        error_recorded = False
        password = generate_password()
        PAGE_URL = sites["parimatch"]
        driver = None

        try:
            logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Å—É {idx}/{len(data_list)}")
            driver = start_chrome(PAGE_URL)
            logger.info("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")

            title, first_name, last_name, _, address, town, _, city, county, postcode, mobile, email, dob_date = row
            title = get_gender_title_pari(title)
            year, month, day = dob_date.split('-')

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.debug(f"–î–∞–Ω—ñ: {first_name} {last_name}, {dob_date}, {mobile}, {email}")

            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            logger.info("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
            time.sleep(3)
            pyautogui.moveTo(822, 960, duration=0.2)
            pyautogui.click()
            time.sleep(1)

            click('Sign Up')
            time.sleep(2)
            click(title)
            write(first_name, into='First name')
            write(last_name, into='Last name')
            time.sleep(2)
            write(f'{day}{month}{year}', into="Date of Birth")
            time.sleep(2)
            write(mobile, into='Mobile Number')
            time.sleep(2)

            if check_for_errors(row, password, results, user_id='...'):
                if stop_flag:
                    save_results_to_excel(results, file_path)
                    logger.info("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ.")
                    return
                raise Exception("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

            click('Continue')
            logger.info("–ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞")

            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            logger.info("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
            time.sleep(1)
            write(address, into='Address Line 1')
            time.sleep(1)
            write(town, into='Town / Village')
            time.sleep(1)
            write(city, into="City")
            time.sleep(1)
            write(county, into="County")
            time.sleep(1)
            write(postcode, into='Postcode')
            time.sleep(1)

            if check_for_errors(row, password, results, user_id='...'):
                if stop_flag:
                    save_results_to_excel(results, file_path)
                    logger.info("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ.")
                    return
                raise Exception("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

            click("Continue To Last Step")
            logger.info("–î—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞")
            time.sleep(2)

            # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            logger.info("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
            write(email, into='Email')
            write(password, into='Password')
            write(Keys.PAGE_DOWN)
            time.sleep(1)
            click(S('label[for="CASINO-EMAIL"]'))
            click(S('label[for="SPORT-EMAIL"]'))
            time.sleep(1)
            write(Keys.PAGE_DOWN)
            click(S('label[for="termsPrivacyPolicy"]'))
            time.sleep(1)
            click(S('button.regv2-button-submit'))
            logger.info("–§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...")
            time.sleep(3)

            if check_for_errors(row, password, results, user_id='...'):
                if stop_flag:
                    save_results_to_excel(results, file_path)
                    logger.info("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ.")
                    return
                raise Exception("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

            click("Submit")
            logger.info("Submit –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è 10 —Å–µ–∫—É–Ω–¥...")

            start_wait = datetime.now()
            time.sleep(10)
            logger.info(f"–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ ({(datetime.now() - start_wait).total_seconds()} —Å–µ–∫)")

            try:
                logger.info("–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó...")
                title_element = S("h3.bvs-msg-box__title")
                title_text = title_element.web_element.get_attribute("innerText").strip()
                logger.info(f"üü¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {repr(title_text)}")
            except Exception as e:
                title_text = ""
                logger.error(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")

            if Text("Account Created").exists():
                results.append(row + [password, "OK", "Success"])
                logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: Account Created")
            elif Text("Duplicate Account").exists():
                results.append(row + [password, "BAD", "Duplicate"])
                logger.warning("‚ö† –î—É–±–ª—ñ–∫–∞—Ç –∞–∫–∞—É–Ω—Ç–∞: Duplicate Account")
            elif Text("Success").exists():
                results.append(row + [password, "OK", "Success"])
                logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: Success")
            elif Text("Player Verification").exists():
                results.append(row + [password, "CNV", "Player Verification"])
                logger.warning("‚ö† –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è: Player Verification")
            elif title_text == "Verify Your Account":
                results.append(row + [password, "CNV", "Verify Identity"])
                logger.warning("‚ö† –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è: Verify Your Account")
            else:
                results.append(row + [password, "BAD", "Reg failed"])
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: –Ω–µ–≤—ñ–¥–æ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

            if stop_flag:
                logger.info("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ.")
                save_results_to_excel(results, file_path)
                return

        except Exception as e:
            logger.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}", exc_info=True)
            if not error_recorded:
                save_results_to_excel(results, file_path)
                error_recorded = True
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.info("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            kill_chrome()

    save_results_to_excel(results, file_path)
    lbl_status.config(text="All done!", fg="green")
    logger.info("‚úÖ –í—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")